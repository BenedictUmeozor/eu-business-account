import PinModal, { PinRefObject } from "@/components/global/PinModal";
import ENDPOINTS from "@/constants/endpoints";
import useAccounts from "@/hooks/use-accounts";
import { Alert, Button, Form, Input, message } from "antd";
import { useEffect, useRef } from "react";
import TransferSuccessModal, {
  TransferSuccessRefObject,
} from "../TransferSuccessModal";
import useSharedMutationAction from "@/hooks/use-shared-mutation-action";
import { useLocation, useNavigate } from "react-router";
import { getErrorMessage } from "@/utils";
import Loader from "@/components/app/Loader";

interface LocationState {
  amount: string;
  description: string;
  sortCode: string;
  beneficiary_id: string;
  currency: string;
}

const TokenPage = () => {
  const [form] = Form.useForm();
  const location = useLocation() as unknown as { state: LocationState };

  const { fetchAccounts } = useAccounts();
  const navigate = useNavigate();

  const modalRef = useRef<PinRefObject>(null);
  const successRef = useRef<TransferSuccessRefObject>(null);

  const paymentMutation = useSharedMutationAction<{
    request_id: string;
    message: string;
  }>({
    url: ENDPOINTS.INITIATE_LOCAL_PAYMENT,
    onSuccess: async data => {
      message.success(data?.message);
      successRef.current?.setReqId(data?.request_id);
      successRef.current?.openModal();
      await fetchAccounts();
    },
    onError: error => {
      message.error(getErrorMessage(error));
    },
    invalidateQueries: ["local-transactions"],
  });

  const handleTransfer = (pin: string) => {
    modalRef.current?.closeModal();

    const payload = {
      beneficiary_id: location.state.beneficiary_id,
      amount: location.state.amount,
      narrative: location.state.description,
      currency: location.state.currency,
      passcode: pin,
    };

    paymentMutation.mutate(payload);
  };

  const onFinish = (values: { token: string }) => {
    console.log(values.token);
    modalRef.current?.openModal();
  };

  useEffect(() => {
    if (!location.state) {
      navigate("/dashboard", { replace: true });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location.state]);

  return (
    <div
      className="flex items-center justify-center py-16
  ">
      {paymentMutation.isPending && <Loader />}
      <div className="bg-white w-full shadow rounded-2xl py-5 px-4 max-w-[520px] space-y-8">
        <header className="space-y-1">
          <h3 className="text-xl text-grey-700 font-semibold">Enter Token</h3>
          <p className="text-grey-500">
            Please enter the 6-digit code generated by your mobile
            authenticator.
          </p>
        </header>
        <Alert
          message="To complete transfer payment, generate a 6-digit token from your mobile authenticator for a more secured payment"
          type="info"
          showIcon
          className="text-primary"
        />
        <Form
          form={form}
          onFinish={onFinish}
          autoComplete="off"
          layout="vertical"
          labelCol={{ className: "text-sm text-grey-600" }}
          className="space-y-8">
          <Form.Item
            name="token"
            rules={[{ required: true, message: "Please input your token!" }]}
            className="flex items-center justify-center">
            <Input.OTP size="large" length={6} />
          </Form.Item>
          <Button
            type="primary"
            size="large"
            shape="round"
            disabled={paymentMutation.isPending}
            className="w-48 mx-auto block"
            htmlType="submit">
            Next
          </Button>
        </Form>
        <div className="flex items-center justify-center">
          <a
            href={ENDPOINTS.AUTHENTICATOR_APP_LINK}
            target="_blank"
            rel="noopener noreferrer"
            className="text-primary">
            Get Authenticator App
          </a>
        </div>
      </div>
      <PinModal
        ref={modalRef}
        onSubmit={handleTransfer}
        loading={false} // Add loading state if needed
      />
      <TransferSuccessModal ref={successRef} />
    </div>
  );
};

export const Component = TokenPage;

export default TokenPage;
